Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Maximal number of mutually orthogonal Latin squares (or MOLS) of order n.
Comments: By convention, a(0) = a(1) = infinity.

Parker and others conjecture that a(10) = 2.

It is also known that a(11) = 10, a(12) >= 5.

It is known that a(n) >= 2 for all n > 6, disproving a conjecture by Euler that a(4k+2) = 1 for all k. - _Jeppe Stig Nielsen_, May 13 2020
```
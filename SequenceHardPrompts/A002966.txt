Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Egyptian fractions: number of solutions of 1 = 1/x_1 + ... + 1/x_n where 0 < x_1 <= ... <= x_n.
Comments: All denominators in the expansion 1 = 1/x_1 + ... + 1/x_n are bounded by A000058(n-1), i.e., 0 < x_1 <= ... <= x_n < A000058(n-1). Furthermore, for a fixed n, x_i <= (n+1-i)*(A000058(i-1)-1). - _Max Alekseyev_, Oct 11 2012

From _R. J. Mathar_, May 06 2010: (Start)

This is the leading edge of the triangle A156869. This is also the row n=1 of an array T(n,m) which gives the number of ways to write 1/n as a sum over m (not necessarily distinct) unit fractions:

   1, 1,  3,  14,   147,   3462, 294314, ...

   1, 2, 10, 108,  2892, 270332, ...

   1, 2, 21, 339, 17253, ...

   1, 3, 28, 694, 51323, ...

   ...

T(.,2) = A018892. T(.,3) = A004194. T(.,4) = A020327, T(.,5) = A020328. T(2,6) is computed by _D. S. McNeil_, who conjectures that the 2nd row is A003167. (End)

If on the other hand, all x_k must be unique, see A006585. - _Robert G. Wilson v_, Jul 17 2013
```
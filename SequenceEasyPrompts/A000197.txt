Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: a(n) = (n!)!.
Comments: The sequence 1, 2, 720!, 4!!!!, ... ,n!!...! (n times) grows too rapidly to have its own entry. See Hofstadter.

a(n) is divisible by 2^A245087(n) but not by 2^(A245087(n)+1), A245087 being the number of trailing zeros in its binary expansion. Also, for n>1, the largest prime divisor of a(n) is the largest prime <= n!, which is listed in A006990(n). - _Stanislav Sykora_, Jul 14 2014

See b-file for a(5), which has 199 digits and is too large to include. - _Jianing Song_, Jun 28 2018
```
Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Number of 1-factorizations of K_{n,n}.
Comments: Also, number of Latin squares of order n with first row 1,2,...,n.

Also number of fixed diagonal Latin squares of order n. - _Eric W. Weisstein_, Dec 18 2005

Also maximum number of Latin squares of order n such that no two of them have all the same rows (respectively, columns). - _Rick L. Shepherd_, Mar 01 2008
```
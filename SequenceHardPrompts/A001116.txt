Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Maximal kissing number of an n-dimensional lattice.
Comments: a(9) = 272 was determined by Watson (1971). a(10) is probably 336.

Lower bounds for the next 4 terms are 336, 438, 756, 918.

From _Nathan L. Skirrow_, Jun 04 2023: (Start)

Trivial upper bounds given by A257479 are 553, 869, 1356, 2066.

a(n) coincides with A257479(n) when a lattice achieves the non-lattice-constrained kissing number, for a(0)=0, a(1)=2, a(2)=6 (A_2), a(3)=12 (A_3), a(4)=24 (D_4), a(8)=240 (E_8) and a(24)=196560 (Leech). A002336(n) agrees with a(n) for all n<=9 (and equality is unknown thereafter), and A028923(n)=a(n) iff n<=6. (End)
```
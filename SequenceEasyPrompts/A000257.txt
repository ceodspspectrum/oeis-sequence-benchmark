Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Number of rooted bicubic maps: a(n) = (8*n-4)*a(n-1)/(n+2) for n >= 2, a(0) = a(1) = 1.
Comments: Number of rooted Eulerian planar maps with n edges. - _Valery A. Liskovets_, Apr 07 2002

Number of indecomposable 1342-avoiding permutations of length n.

Also counts rooted planar 2-constellations with n digons. - _Valery A. Liskovets_, Dec 01 2003

a(n) is also the number of rooted planar hypermaps with n darts (darts are semi-edges in the particular case of ordinary maps). - _Valery A. Liskovets_, Apr 13 2006

Number of "new" intervals in Tamari lattices of size n (see Chapoton paper). - _Ralf Stephan_, May 08 2007
```
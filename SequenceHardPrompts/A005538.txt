Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Numbers n such that 8*3^n + 1 is prime.
Comments: From _R. J. Mathar_, Mar 01 2010: (Start)

The row r=4 in the table of "Numbers n such that 2*r*3^n+1 is prime":

.1,..2,..4,..5,..6,..9,.16,.17,.30,.54,.57,.60,.65,.132,.180,

.1,..2,..3,..6,.14,.15,.39,201,249,

.1,..3,..4,..5,..8,.15,.16,.29,.53,.56,.59,.64,131,179,

.2,..7,..8,.10,.22,.52,.58,.76,130,143,

.1,..3,..4,..7,..9,.12,.18,.22,102,112,157,162,289,

.1,..2,..5,.13,.14,.38,200,248,

.1,..2,..3,.18,.22,.26,.27,.33,.39,.57,.62,.94,145,246,

.3,..4,..5,.12,.24,.36,.77,195,296,297,

.2,..3,..4,..7,.14,.15,.28,.52,.55,.58,.63,130,178,

.1,..2,..3,..4,..5,..8,.16,.19,.28,.50,134,280,

.1,..2,..4,..5,.10,.12,.14,.24,.34,.37,.52,.56,.65,.68,.96,106,128,156,169,236,254,

.1,..6,..7,..9,.21,.51,.57,.75,129,142,

.1,.12,.15,.17,.20,.29,.31,.32,.35,.37,.77,.95,193,203,224,296,

.3,..4,..8,.11,.14,.15,.18, (End)

a(21) > 2*10^5. - _Robert Price_, Mar 16 2014

2*A056799(16) = 2*161930 = 323860 is also a member, but I do not know if it is the next member. - _Jeppe Stig Nielsen_, Oct 13 2019

a(22) > 8*10^5. - _Paul S. Vanderveen_, May 02 2020
```
Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: a(n) = 2^(2*n+1) - binomial(2*n+1, n+1).
Comments: Also a(n) = 2nd elementary symmetric function of binomial(n,0), binomial(n,1), ..., binomial(n,n).

Also a(n) = one half the sum of the heights, over all Dyck (n+2)-paths, of the vertices that are at even height and terminate an upstep. For example with n=1, these vertices are indicated by asterisks in the 5 Dyck 3-paths: UU*UDDD, UU*DU*DD, UDUU*DD, UDUDUD, UU*DDUD, yielding a(1)=(2+4+2+0+2)/2=5. - _David Callan_, Jul 14 2006

Hankel transform is (-1)^n*(2n+1); the Hankel transform of sum(k=0..n, C(2*n,k) ) - C(2n,n) is (-1)^n*n. - _Paul Barry_, Jan 21 2007

Row sums of the Riordan matrix (1/(1-4x),(1-sqrt(1-4x))/2) (A187926). - _Emanuele Munarini_, Mar 16 2011

From _Gus Wiseman_, Jul 19 2021: (Start)

For n > 0, a(n-1) is also the number of integer compositions of 2n with nonzero alternating sum, where the alternating sum of a sequence (y_1,...,y_k) is Sum_i (-1)^(i-1) y_i. These compositions are ranked by A053754 /\ A345921. For example, the a(3-1) = 22 compositions of 6 are:

  (6)  (1,5)  (1,1,4)  (1,1,1,3)  (1,1,1,1,2)

       (2,4)  (1,2,3)  (1,1,3,1)  (1,1,2,1,1)

       (4,2)  (1,4,1)  (1,2,1,2)  (2,1,1,1,1)

       (5,1)  (2,1,3)  (1,3,1,1)

              (2,2,2)  (2,1,2,1)

              (3,1,2)  (3,1,1,1)

              (3,2,1)

              (4,1,1)

(End)
```
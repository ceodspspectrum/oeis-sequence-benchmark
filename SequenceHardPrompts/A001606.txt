Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Indices of prime Lucas numbers.
Comments: Some of the larger entries may only correspond to probable primes.

Since (as noted under A000032) L(n) divides L(mn) whenever m is odd, L(n) cannot be prime unless n is itself prime, or else n contains no odd divisor, i.e., is a power of 2. Potential divisors of L(n) must satisfy certain linear forms dependent upon the parity of n, as shown in Vajda (1989), p. 82 (with a slight typographical error in the proof). - _John Blythe Dobson_, Oct 22 2007

Powers of 2 in this sequence are 2, 4, 8, 16; for 5 <= m <= 24, L(2^m) is composite; no factors of L(2^m) are known for m = 25, 26, 27, 29, 32, 33... (See Link section). - _Serge Batalov_, May 30 2017

2316773 is in the sequence, but its position is not yet defined. L(2316773) is a 484177-digit PRP. - _Serge Batalov_, Jun 11 2017
```
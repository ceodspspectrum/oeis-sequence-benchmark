Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Integer part of square root of n-th prime.
Comments: Conjecture: No two successive terms in the sequence differ by more than 1. Proof of this would prove the converse of the theorem that every prime is surrounded by two consecutive squares, namely |sqrt(p)|^2 and (|sqrt(p)|+1)^2. - _Cino Hilliard_, Jan 22 2003

Equals the number of squares less than prime(n). Cf. A014689. - _Zak Seidov_ Nov 04 2007

The above conjecture is Legendre's conjecture that for n > 0 there is always a prime between n^2 and (n+1)^2. See A014085, number of primes between two consecutive squares, which is also the number of times n is repeated in the present sequence. - _Jean-Christophe Herv√©_, Oct 25 2013
```
Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: a(1)=3, b(n) = Product_{k=1..n} a(k), a(n+1) is the largest prime factor of (b(n)-1).
Comments: Suggested by Euclid's proof that there are infinitely many primes.

a(15) requires completing the factorization: 13 * 67 * 14479 * 167197 * 924769 * 2688244927 * 888838110930755119 * 14372541055015356634061816579965403 * C211 where C211=6609133306626483634448666494646737799624640616060730302142187545405582531010390290502001156883917023202671554510633460047901459959959325342475132778791495112937562941066523907603281586796876335607258627832127303. - _Sean A. Irvine_, Nov 10 2009
```
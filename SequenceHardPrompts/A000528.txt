Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Number of types of Latin squares of order n. Equivalently, number of nonisomorphic 1-factorizations of K_{n,n}.
Comments: Here "type" means an equivalence class of Latin squares under the operations of row permutation, column permutation, symbol permutation and transpose. In the 1-factorizations formulation, these operations are labeling of left side, labeling of right side, permuting the order in which the factors are listed and swapping the left and right sides, respectively. - _Brendan McKay_

There are 6108088657705958932053657 isomorphism classes of one-factorizations of K_{11,11}. - Petteri Kaski (petteri.kaski(AT)cs.helsinki.fi), Sep 18 2009
```
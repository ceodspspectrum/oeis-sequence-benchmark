Write a python code that takes a number n as input from stdin, outputs a single element of a sequence as a string to stdout. Just output the n-th element in the sequence, not the whole sequence or anything other than the single sequence element. You will be graded by my running your code and comparing the results with a look-up table. If you use a look-up table for your code, you will not only fail the test. Hardcoding values that can be computed without hardcoding is considered to be using a look-up table. Use only the standard python library. No packages will be installed with pip or conda. Output your final code at the end of your response inside triple backticks like:
```
#your code goes here
```
The last part of your response that is inside triple backticks will be used as your response for the purposes of the test. The code will be stopped after a short period of time, so make it efficient if needed.

Here is some information on the sequence:
```
Name: Number of classes of primitive positive definite binary quadratic forms of discriminant D = -4n; or equivalently the class number of the quadratic order of discriminant D = -4n.
Comments: From _Joerg Arndt_, Sep 02 2008: (Start)

It seems that 2*a(n) gives the degree of the minimal polynomial of (k_n)^2 where k_n is the n-th singular value, i.e., K(sqrt(1-k_n^2))/K(k_n)==sqrt(n) (and K is the elliptic integral of the first kind: K(x) := hypergeom([1/2,1/2],[1], x^2)).

Also, when setting K3(x)=hypergeom([1/3,2/3],[1], x^3) and solving for x such that K3((1-x^3)^(1/3))/K3(x)==sqrt(n), then the degree of the minimal polynomial of x^3 is every third term of this sequence, or so it seems. (End)

a(n) appears to be the degree of Klein's j-invariant j(sqrt(-n)) as an algebraic integer. - _Li Han_, Mar 02 2020
```